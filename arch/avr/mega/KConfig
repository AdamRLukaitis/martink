choice 
	prompt "AVR Model" 
	default ATMEGA328P

	config AVRMEGA
		bool
		
	config ATMEGA328P
		depends on AVR
		select HAVE_ADC
		select HAVE_UART
		select HAVE_UART0
		select HAVE_I2C
		select HAVE_TWI
		select HAVE_TWI0
		select HAVE_SPI
		select HAVE_SPI0
		select HAVE_TIMER0
		select HAVE_TIMER1
		select HAVE_TIMER2
		bool "AVR ATMega328P"

	config ATMEGA103
		depends on AVR
		select HAVE_ADC
		select HAVE_UART
		select HAVE_UART0
		select HAVE_I2C
		select HAVE_TWI
		select HAVE_TWI0
		select HAVE_SPI
		select HAVE_SPI0
		select HAVE_TIMER0
		select HAVE_TIMER1
		select HAVE_TIMER2
		bool "AVR ATMega103"
		
	config ATMEGA88
		depends on AVR
		select HAVE_ADC
		select HAVE_UART
		select HAVE_UART0
		select HAVE_I2C
		select HAVE_TWI
		select HAVE_TWI0
		select HAVE_SPI
		select HAVE_SPI0
		select HAVE_TIMER0
		select HAVE_TIMER1
		select HAVE_TIMER2
		bool "AVR ATMega88"

	config ATMEGA128
		depends on AVR
		select HAVE_ADC
		select HAVE_UART
		select HAVE_UART0
		select HAVE_I2C
		select HAVE_TWI
		select HAVE_TWI0
		select HAVE_SPI
		select HAVE_SPI0
		select HAVE_TIMER0
		select HAVE_TIMER1
		select HAVE_TIMER2
		bool "AVR ATMega128"

	config ATMEGA168
		depends on AVR
		select HAVE_ADC
		select HAVE_UART
		select HAVE_UART0
		select HAVE_I2C
		select HAVE_TWI
		select HAVE_TWI0
		select HAVE_SPI
		select HAVE_SPI0
		select HAVE_TIMER0
		select HAVE_TIMER1
		select HAVE_TIMER2
		bool "AVR ATMega168"

	config ATMEGA2560
		depends on AVR
		select HAVE_ADC
		select HAVE_UART
		select HAVE_UART0
		select HAVE_UART1
		select HAVE_UART2
		select HAVE_I2C
		select HAVE_TWI
		select HAVE_TWI0
		select HAVE_SPI
		select HAVE_SPI0
		select HAVE_TIMER0
		select HAVE_TIMER1
		select HAVE_TIMER2
		bool "AVR ATMega2560"

	config ATMEGA644
		depends on AVR
		select HAVE_ADC
		select HAVE_UART
		select HAVE_UART0
		select HAVE_UART1
		select HAVE_I2C
		select HAVE_TWI
		select HAVE_TWI0
		select HAVE_SPI
		select HAVE_SPI0
		select HAVE_TIMER0
		select HAVE_TIMER1
		select HAVE_TIMER2
		bool "AVR ATMega644"

	config ATMEGA48
		depends on AVR
		select HAVE_ADC
		select HAVE_UART
		select HAVE_UART0
		select HAVE_I2C
		select HAVE_TWI
		select HAVE_TWI0
		select HAVE_SPI
		select HAVE_SPI0
		select HAVE_TIMER0
		select HAVE_TIMER1
		select HAVE_TIMER2
		bool "AVR ATMega48"
endchoice 

menu "Configure ATMega328P driver"
	depends on ATMEGA328P
	comment "ATmega328P general options"
	
	config TIMESTAMP_COUNTER
		default y
		bool "Enable timestamp subsystem (timer1 configured as cpu clock counter)"
		help
			Uses timer1 for microsecond time measurement tasks. This is
			very useful for many other features so leave this enabled
			(although you will not be able to use timer1 for anything else)
			
	config ADC_MODE_AUTOMATIC
		default n
		bool "Enable continuous automatic adc measurement on all channels"
		help
			Uses 16 bytes more memory but monitors all adc channels
			continously using ADC interrupt. These values can then be read
			immediately using adc0_read_cached(chan) instead of having to
			wait for each conversion to complete.

	config GPIO_PIN_STATES
		select TIMESTAMP_COUNTER
		default y
		bool "Enable GPIO pin states"
		help
			Enables gpio_get_status() and state change recording for GPIO
			pins with timestamp for when the change occured. For this
			PCINT handlers are used. This lets you use gpio_get_status()
			to read last gpioio event and time for last leading and
			trailing edge with microsecond precision. This in turn lets
			you easily measure pulse widths on gpio pins and read various
			sensors that report values using pulse width signal, without
			having to implement all this functionality yourself. The
			drawback: it currently uses ~200 bytes of memory for state
			information.

	comment "UART Config ---"
	
	config BUFFERED_UART
		default y
		bool "Use buffered uart"
		help
			Enables interrupt driven buffered uart using circular buffer.
			Enables fast writes without having to wait for the data to be
			sent. All data is instead sent in the background.

	config UART0_TX_BUF_SIZE
		depends on BUFFERED_UART
		default 32
		int "Uart TX buffer size (power of 2!)"
		help
			Set the size of the outgoing data buffer in bytes. If you
			enter value that is not power of two, the value will be
			increased so that it becomes power of 2 in code (for fast
			modulo operation)

	config UART0_RX_BUF_SIZE
		depends on BUFFERED_UART
		default 32
		int "Uart RX buffer size (power of 2!)"
		help
			Set the size of the incoming buffer for received data.

	config UART0_NAME
		depends on HAVE_UART0
		default "uart0"
		string "UART0 device name"
	config UART1_NAME
		depends on HAVE_UART1
		default "uart1"
		string "UART1 device name"
	config UART2_NAME
		depends on HAVE_UART2
		default "uart2"
		string "UART2 device name"

	comment "SPI config ---"
	config SPI0_NAME
		depends on HAVE_SPI0
		default "spi0"
		string "SPI0 device name"
	config SPI1_NAME
		depends on HAVE_SPI1
		default "spi1"
		string "SPI1 device name"
	config SPI2_NAME
		depends on HAVE_SPI2
		default "spi2"
		string "SPI2 device name"

	comment "I2C/TWI config ---"
	
	config TWI0_NAME
		depends on HAVE_TWI0
		default "twi0"
		string "TWI0 device name"
	config TWI1_NAME
		depends on HAVE_TWI1
		default "twi1"
		string "TWI1 device name"
endmenu
